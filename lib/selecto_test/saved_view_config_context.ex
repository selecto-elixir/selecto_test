defmodule SelectoTest.SavedViewConfigContext do
  @moduledoc """
  Context module for saved view configurations with view type separation.

  This module provides a `use` macro that adds saved view configuration
  functionality to your domain modules, with support for different view types.

  Generated by mix selecto.gen.saved_view_configs

  ## Usage

      defmodule MyApp.Domains.UserDomain do
        use SelectoTest.SavedViewConfigContext

        # ... rest of domain configuration
      end
  """

  defmacro __using__(_opts \\ []) do
    quote do
      import Ecto.Query

      @doc """
      Get a saved view configuration by name, context, and view type.
      """
      def get_view_config(name, context, view_type, opts \\ []) do
        user_id = Keyword.get(opts, :user_id)

        query =
          from v in SelectoTest.SavedViewConfig,
            where: v.name == ^name,
            where: v.context == ^context,
            where: v.view_type == ^view_type

        query =
          if user_id do
            from v in query,
              where: v.user_id == ^user_id or v.is_public == true
          else
            from v in query,
              where: v.is_public == true
          end

        SelectoTest.Repo.one(query)
      end

      @doc """
      Save or update a view configuration.
      """
      def save_view_config(name, context, view_type, params, opts \\ []) do
        user_id = Keyword.get(opts, :user_id)
        description = Keyword.get(opts, :description)
        is_public = Keyword.get(opts, :is_public, false)

        case get_view_config(name, context, view_type, user_id: user_id) do
          nil ->
            %SelectoTest.SavedViewConfig{}
            |> SelectoTest.SavedViewConfig.changeset(%{
              name: name,
              context: context,
              view_type: view_type,
              params: params,
              user_id: user_id,
              description: description,
              is_public: is_public
            })
            |> SelectoTest.Repo.insert()

          existing ->
            existing
            |> SelectoTest.SavedViewConfig.changeset(%{
              params: params,
              description: description,
              is_public: is_public
            })
            |> SelectoTest.Repo.update()
        end
      end

      @doc """
      List view configurations for a context and view type.
      """
      def list_view_configs(context, view_type, opts \\ []) do
        user_id = Keyword.get(opts, :user_id)
        include_public = Keyword.get(opts, :include_public, true)

        query =
          from v in SelectoTest.SavedViewConfig,
            where: v.context == ^context,
            where: v.view_type == ^view_type,
            order_by: [desc: v.updated_at]

        query =
          cond do
            user_id && include_public ->
              from v in query,
                where: v.user_id == ^user_id or v.is_public == true

            user_id ->
              from v in query,
                where: v.user_id == ^user_id

            include_public ->
              from v in query,
                where: v.is_public == true

            true ->
              from v in query,
                where: false
          end

        SelectoTest.Repo.all(query)
      end

      @doc """
      Delete a view configuration.
      """
      def delete_view_config(name, context, view_type, opts \\ []) do
        user_id = Keyword.get(opts, :user_id)

        case get_view_config(name, context, view_type, user_id: user_id) do
          nil ->
            {:error, :not_found}

          config ->
            if config.user_id == user_id do
              SelectoTest.Repo.delete(config)
            else
              {:error, :unauthorized}
            end
        end
      end

      @doc """
      Load a view configuration by name.
      Alias for get_view_config for compatibility.
      """
      def load_view_config(name, context, view_type, opts \\ []) do
        get_view_config(name, context, view_type, opts)
      end

      @doc """
      Update a view configuration.
      """
      def update_view_config(name, context, view_type, params, opts \\ []) do
        user_id = Keyword.get(opts, :user_id)
        description = Keyword.get(opts, :description)
        is_public = Keyword.get(opts, :is_public)

        case get_view_config(name, context, view_type, user_id: user_id) do
          nil ->
            {:error, :not_found}

          config ->
            if config.user_id == user_id do
              config
              |> SelectoTest.SavedViewConfig.changeset(%{
                params: params,
                description: description,
                is_public: is_public
              })
              |> SelectoTest.Repo.update()
            else
              {:error, :unauthorized}
            end
        end
      end

      @doc """
      Get just the names of saved view configs for a context and view type.
      """
      def get_view_config_names(context, view_type, opts \\ []) do
        configs = list_view_configs(context, view_type, opts)
        Enum.map(configs, fn config -> config.name end)
      end

      @doc """
      Decode a view configuration to get its params.
      """
      def decode_view_config(view_config) do
        view_config.params
      end
    end
  end
end
